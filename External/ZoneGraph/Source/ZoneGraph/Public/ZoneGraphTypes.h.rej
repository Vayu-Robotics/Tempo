--- Source/ZoneGraph/Public/ZoneGraphTypes.h	2024-09-26 22:04:46
+++ /Users/pete/TempoUnrealFestDemo/Plugins/Tempo/External/ZoneGraph/Source/ZoneGraph/Public/ZoneGraphTypes.h	2024-09-17 17:52:05
@@ -192,11 +192,20 @@
 
 // Filter passes if any of the 'AnyTags', and all of the 'AllTags', and none of the 'NotTags' are present.
 // Setting include or exclude tags to None, will skip that particular check.
-USTRUCT()
+USTRUCT(BlueprintType)
 struct ZONEGRAPH_API FZoneGraphTagFilter
 {
 	GENERATED_BODY()
 
+	FZoneGraphTagFilter() = default;
+
+	FZoneGraphTagFilter(const FZoneGraphTagMask& InAnyTags, const FZoneGraphTagMask& InAllTags, const FZoneGraphTagMask& InNotTags)
+		: AnyTags(InAnyTags)
+		, AllTags(InAllTags)
+		, NotTags(InNotTags)
+	{
+	}
+
 	bool Pass(const FZoneGraphTagMask Tags) const
 	{
 		return (AnyTags == FZoneGraphTagMask::None || Tags.ContainsAny(AnyTags))
@@ -207,13 +216,19 @@
 	bool operator==(const FZoneGraphTagFilter& RHS) const { return AnyTags == RHS.AnyTags && AllTags == RHS.AllTags && NotTags == RHS.NotTags; }
 	bool operator!=(const FZoneGraphTagFilter& RHS) const { return AnyTags != RHS.AnyTags || AllTags != RHS.AllTags || NotTags != RHS.NotTags; }
 
-	UPROPERTY(Category = Zone, EditAnywhere)
+	friend uint32 GetTypeHash(const FZoneGraphTagFilter& ZoneGraphTagFilter)
+	{
+		const uint32 AnyAllHash = HashCombine(GetTypeHash(ZoneGraphTagFilter.AnyTags), GetTypeHash(ZoneGraphTagFilter.AllTags));
+		return HashCombine(AnyAllHash, GetTypeHash(ZoneGraphTagFilter.NotTags));
+	}
+
+	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite)
 	FZoneGraphTagMask AnyTags = FZoneGraphTagMask::None;
 
-	UPROPERTY(Category = Zone, EditAnywhere)
+	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite)
 	FZoneGraphTagMask AllTags = FZoneGraphTagMask::None;
 
-	UPROPERTY(Category = Zone, EditAnywhere)
+	UPROPERTY(Category = Zone, EditAnywhere, BlueprintReadWrite)
 	FZoneGraphTagMask NotTags = FZoneGraphTagMask::None;
 };
 
@@ -290,6 +305,8 @@
 
 	// Reverses the lane profile. The lanes array will be reversed, as well as the lane directions. 
 	void ReverseLanes();
+
+	bool IsValid(const bool bMustHaveName = true) const;
 
 	UPROPERTY(Category = Lane, EditAnywhere)
 	FName Name;
